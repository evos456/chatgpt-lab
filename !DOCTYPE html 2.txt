<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D Gas Simulation with Temperature</title>
    <style>
        body {
            display: flex;
            flex-direction: row;
            justify-content: center;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        #container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        canvas {
            border: 1px solid black;
            background-color: #f0f0f0;
        }
        #temperatureDisplay {
            text-align: center;
            font-size: 20px;
            margin-top: 10px;
        }
        #infoBox {
            width: 250px;
            margin-left: 20px;
            padding: 15px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
        }
        #infoBox h3 {
            font-size: 18px;
            margin-bottom: 10px;
        }
        #infoBox p {
            font-size: 14px;
            margin-bottom: 10px;
        }
        #infoBox code {
            display: block;
            font-size: 16px;
            background-color: #eaeaea;
            padding: 5px;
            border-radius: 3px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div id="container">
        <canvas id="gasContainer" width="800" height="600"></canvas>
        <div id="temperatureDisplay">Temperature: Calculating...</div>
    </div>
    <div id="infoBox">
        <h3>Kinetic Theory of Gases</h3>
        <p>The kinetic theory of gases describes a gas as a large number of small particles (atoms or molecules), all of which are in constant, random motion.</p>
        <p>The temperature of the gas is directly proportional to the average kinetic energy of its particles.</p>
        <p>The relationship is given by:</p>
        <code>T = (2/3) * (K / (N * k<sub>B</sub>))</code>
        <p>where:</p>
        <ul>
            <li>T = Temperature (K)</li>
            <li>K = Total Kinetic Energy</li>
            <li>N = Number of particles</li>
            <li>k<sub>B</sub> = Boltzmann constant</li>
        </ul>
    </div>
    <script>
        const canvas = document.getElementById('gasContainer');
        const ctx = canvas.getContext('2d');
        const tempDisplay = document.getElementById('temperatureDisplay');

        const numParticles = 20; // Number of particles
        const particles = [];
        const containerWidth = canvas.width;
        const containerHeight = canvas.height;
        const radius = 10; // Radius of each particle
        const mass = 6.646e-27; // Mass of a helium nucleus in kg
        const kB = 1.38e-23; // Boltzmann constant

        const attractionStrength = 0.01; // Strength of van der Waals-like attraction

        // Utility function to get random velocity
        function randomVelocity() {
            return Math.random() * 200 - 100; // Adjusted to give noticeable kinetic energy
        }

        // Particle class
        class Particle {
            constructor(x, y, vx, vy) {
                this.x = x;
                this.y = y;
                this.vx = vx;
                this.vy = vy;
            }

            update() {
                // Update positions
                this.x += this.vx;
                this.y += this.vy;

                // Check for collisions with walls
                if (this.x - radius < 0 || this.x + radius > containerWidth) {
                    this.vx *= -1;
                    this.x = Math.max(radius, Math.min(this.x, containerWidth - radius));
                }
                if (this.y - radius < 0 || this.y + radius > containerHeight) {
                    this.vy *= -1;
                    this.y = Math.max(radius, Math.min(this.y, containerHeight - radius));
                }
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, radius, 0, Math.PI * 2);
                ctx.fillStyle = 'blue';
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.stroke();
                ctx.closePath();
            }

            applyAttractionForce(other) {
                const dx = other.x - this.x;
                const dy = other.y - this.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance > 0 && distance < 100) { // Only apply force within a certain range
                    const forceMagnitude = attractionStrength / distance;
                    const fx = forceMagnitude * dx;
                    const fy = forceMagnitude * dy;

                    this.vx += fx / mass;
                    this.vy += fy / mass;
                }
            }

            kineticEnergy() {
                return 0.5 * mass * (this.vx * this.vx + this.vy * this.vy);
            }
        }

        // Initialize particles with random positions and velocities
        for (let i = 0; i < numParticles; i++) {
            const x = Math.random() * (containerWidth - 2 * radius) + radius;
            const y = Math.random() * (containerHeight - 2 * radius) + radius;
            const vx = randomVelocity();
            const vy = randomVelocity();
            particles.push(new Particle(x, y, vx, vy));
        }

        // Calculate the temperature based on the kinetic energy of particles
        function calculateTemperature() {
            let totalKineticEnergy = 0;

            for (let i = 0; i < numParticles; i++) {
                totalKineticEnergy += particles[i].kineticEnergy();
            }

            const temperature = (2 / 3) * (totalKineticEnergy / (numParticles * kB));
            return temperature;
        }

        // Main simulation loop
        function simulate() {
            ctx.clearRect(0, 0, containerWidth, containerHeight);

            // Apply attraction forces and update/draw each particle
            for (let i = 0; i < numParticles; i++) {
                for (let j = i + 1; j < numParticles; j++) {
                    particles[i].applyAttractionForce(particles[j]);
                    particles[j].applyAttractionForce(particles[i]);
                }
                particles[i].update();
                particles[i].draw();
            }

            // Calculate and display temperature
            const temperature = calculateTemperature();
            tempDisplay.textContent = `Temperature: ${temperature.toFixed(2)} K`;

            requestAnimationFrame(simulate);
        }

        simulate();
    </script>
</body>
</html>
